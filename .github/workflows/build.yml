name: "Builds"

on:
  pull_request: { branches: [ "main" ] }
  push: { branches: [ "main" ] }

jobs:
  build:
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        ghc: [ "8.10.7" ]
        cabal: [ "latest" ]

    steps:
      - name: "Checkout this repository."
        uses: "actions/checkout@v2"

      - name: "Checkout latest haskell-language-server release."
        uses: "actions/checkout@v2"
        with:
          path: "hls"
          repository: "haskell/haskell-language-server"
          ref: "1.4.0"
          submodules: true

      - name: "Set up Haskell tooling."
        uses: "haskell/actions/setup@v1"
        id: "set-up-haskell-tooling"
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: "Freeze 'cabal-install' dependency solution."
        run: |
          # Generate a 'cabal.project.freeze' file scoped to an exact snapshot
          # of Hackage's index state at some arbitrarily recent point in time.
          #
          # TODO: See if it's better to just commit this to the repository and
          # copy the freeze file into the 'hls' sub-directory on each run.
          #
          # This way, it would be trivial to write another Action which could
          # periodically regenerate the freeze file every so often.
          cd hls
          cabal freeze --index-state "hackage.haskell.org 2021-09-13T20:19:59Z"
          cd ../

      - name: "Cache dependency build artifacts."
        uses: "actions/cache@v2"
        with:
          path: |
            ${{ steps.set-up-haskell-tooling.outputs.cabal-store }}
          key: ${{ runner.os }}-cabal-${{ matrix.ghc }}-${{ hashFiles('./hls/cabal.project.freeze') }}
          restore-keys: ${{ runner.os }}-cabal-${{ matrix.ghc }}-

      - name: "Build dependencies."
        run : |
          cd hls
          cabal update
          cabal build --only-dependencies
          cd ../

      - name: "Shorten binary names."
        run: |
          cd hls
          sed -i.bak -e 's/haskell-language-server/hls/g' \
                     -e 's/haskell_language_server/hls/g' \
                     haskell-language-server.cabal
          sed -i.bak -e 's/Paths_haskell_language_server/Paths_hls/g' \
                     src/**/*.hs exe/*.hs
          cd ../

      - name: "Cache Haskell Language Server build artifacts."
        uses: "actions/cache@v2"
        with:
          path: |
            ./hls/dist-newstyle
          key: ${{ runner.os }}-cabal-${{ matrix.ghc }}-${{ hashFiles('./hls/haskell-language-server.cabal') }}
          restore-keys: ${{ runner.os }}-cabal-${{ matrix.ghc }}-

      - name: "Build Haskell Language Server executable."
        run: |
          cd hls
          cabal build exe:hls -O2 # --ghc-options="-dynamic" # XXX: Unclear whether this is necessary
          cd ../

      - name: "Compress Haskell Language Server executable."
        id: "compress-hls-executable"
        run: |
          HLS_BUILD=$(find ./hls/dist-newstyle \( -name 'hls' \) -type f)
          HLS=haskell-language-server-${{ matrix.ghc }}
          cp $HLS_BUILD $HLS

          gzip --best $HLS
          echo ::set-output name=path::$HLS.gz
          echo ::set-output name=content_type::application/gzip
          echo ::set-output name=extension::gz
